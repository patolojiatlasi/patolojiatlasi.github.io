name: Monthly Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 1 * *'

jobs:
  monthly-release:
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      RENV_PATHS_ROOT: ~/.local/share/renv
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Setup renv
        uses: r-lib/actions/setup-renv@v2

      - name: Restore R package cache
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install R dependencies
        run: |
            if (!requireNamespace("remotes", quietly = TRUE)) {install.packages("remotes", dependencies = TRUE, quiet = TRUE, verbose = FALSE)}
            remotes::install_deps(dependencies = TRUE)
            if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            renv::restore()
            if (!requireNamespace("fs", quietly = TRUE)) install.packages("fs", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            if (!requireNamespace("quarto", quietly = TRUE)) install.packages("quarto", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            if (!requireNamespace("xfun", quietly = TRUE)) {install.packages("xfun", dependencies = TRUE, quiet = TRUE, verbose = FALSE)}
            if (!requireNamespace("readxl", quietly = TRUE)) {install.packages("readxl", dependencies = TRUE, quiet = TRUE, verbose = FALSE)}
            if (!requireNamespace("tinytex", quietly = TRUE)) {install.packages("tinytex, dependencies = TRUE, quiet = TRUE, verbose = FALSE")}
            if (!tinytex::is_tinytex()) {tinytex::install_tinytex()}
            saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
            writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: "Epub Word"
        shell: Rscript {0}
        run: |
            fs::file_copy(path = "./_quarto_TR_epub_word.yml", new_path = "./_quarto.yml", overwrite = TRUE)
            fs::file_copy(path = "./R/languageTR.R", new_path = "./R/language.R", overwrite = TRUE)
            if (dir.exists(paths = "./_freeze")) { fs::dir_delete(path = "./_freeze") }
            if (dir.exists(paths = "./_freeze_TR_epub_word")) { fs::dir_copy(path = "./_freeze_TR_epub_word", new_path = "./_freeze", overwrite = TRUE) }
            patolojiatlasi_histopathologyatlas <- readxl::read_excel("./patolojiatlasi_histopathologyatlas.xlsx")
            patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas[, c("TR_chapter_qmd", "TR_epub_word_chapter_qmd")]
            patolojiatlasi_histopathologyatlas$TR_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$TR_chapter_qmd, ".qmd")
            patolojiatlasi_histopathologyatlas$TR_epub_word_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$TR_epub_word_chapter_qmd, ".qmd")
            fs::file_copy(path = patolojiatlasi_histopathologyatlas$TR_chapter_qmd,
              new_path = patolojiatlasi_histopathologyatlas$TR_epub_word_chapter_qmd,
              overwrite = TRUE)
            qmd_epub_word_TR_files <- list.files(path = ".", pattern = "./*_epub_word_TR.qmd", recursive = FALSE)
            xfun::gsub_files(files = qmd_epub_word_TR_files,
                 pattern = "panel-tabset",
                 replacement = "")
            xfun::gsub_files(files = qmd_epub_word_TR_files,
                 pattern = ":::::",
                 replacement = "")
            xfun::gsub_files(files = qmd_epub_word_TR_files,
                 pattern = "### WSI - Link",
                 replacement = "")
            xfun::gsub_files(files = qmd_epub_word_TR_files,
                 pattern = "### WSI",
                 replacement = "")
            xfun::gsub_files(files = qmd_epub_word_TR_files,
                 pattern = "### Diagnosis",
                 replacement = "")
            xfun::gsub_files(files = qmd_epub_word_TR_files,
                 pattern = "### Tanı için tıklayın",
                 replacement = "### Tanı")
            xfun::gsub_files(files = qmd_epub_word_TR_files,
                 pattern = '\\!\\[\\]\\(\\.\\/qrcodes\\/\\{\\{template\\}\\}-\\{\\{stain\\}\\}_qrcode.svg\\)\\{width="15%"\\}',
                 replacement = "")

      - name: "Render Book Epub Word"
        shell: Rscript {0}
        run: |
          quarto::quarto_render(".", as_job = FALSE)

      - name: "Post Render Book Epub Word"
        shell: Rscript {0}
        run: |
          if (dir.exists(paths = "./_freeze")) { fs::dir_copy(path = "./_freeze",
               new_path = "./_freeze_TR_epub_word",
               overwrite = TRUE) }
          if (dir.exists(paths = "./_freeze")) { fs::dir_delete(path = "./_freeze") }
          patolojiatlasi_histopathologyatlas <- readxl::read_excel("./patolojiatlasi_histopathologyatlas.xlsx")
          patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas[, c("TR_chapter_qmd", "TR_epub_word_chapter_qmd")]
          '%>%' <- magrittr:::`%>%`
          patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas %>%
              dplyr::distinct() %>%
              dplyr::filter(TR_chapter_qmd != TR_epub_word_chapter_qmd)
          patolojiatlasi_histopathologyatlas$TR_epub_word_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$TR_epub_word_chapter_qmd, ".qmd")
          fs::file_delete(path = patolojiatlasi_histopathologyatlas$TR_epub_word_chapter_qmd)





      - name: "Prepare Render pdf TR"
        shell: Rscript {0}
        run: |
          fs::file_copy(path = "./_quarto_TR_pdf.yml",
              new_path = "./_quarto.yml",
              overwrite = TRUE)
          fs::file_copy(path = "./R/languageTR.R",
              new_path = "./R/language.R",
              overwrite = TRUE)
          if (dir.exists(paths = "./_freeze")) {fs::dir_delete(path = "./_freeze")}
          if (dir.exists(paths = "./_freeze_TR_pdf")) {
              fs::dir_copy(path = "./_freeze_TR_pdf",
               new_path = "./_freeze",
               overwrite = TRUE) }
          patolojiatlasi_histopathologyatlas <- readxl::read_excel("./patolojiatlasi_histopathologyatlas.xlsx")
          patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas[, c("TR_chapter_qmd", "TR_pdf_chapter_qmd")]
          patolojiatlasi_histopathologyatlas$TR_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$TR_chapter_qmd, ".qmd")
          patolojiatlasi_histopathologyatlas$TR_pdf_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$TR_pdf_chapter_qmd, ".qmd")
          fs::file_copy(path = patolojiatlasi_histopathologyatlas$TR_chapter_qmd,
              new_path = patolojiatlasi_histopathologyatlas$TR_pdf_chapter_qmd,
              overwrite = TRUE)
          qmd_pdf_TR_files <- list.files(path = ".", pattern = "./*_pdf_TR.qmd", recursive = FALSE)
          xfun::gsub_files(files = qmd_pdf_TR_files,
                 pattern = "panel-tabset",
                 replacement = "")
          xfun::gsub_files(files = qmd_pdf_TR_files,
                 pattern = ":::::",
                 replacement = "")
          xfun::gsub_files(files = qmd_pdf_TR_files,
                 pattern = "### WSI - Link",
                 replacement = "")
          xfun::gsub_files(files = qmd_pdf_TR_files,
                 pattern = "### WSI",
                 replacement = "")
          xfun::gsub_files(files = qmd_pdf_TR_files,
                 pattern = "### Diagnosis",
                 replacement = "")
          xfun::gsub_files(files = qmd_pdf_TR_files,
                 pattern = "### Tanı için tıklayın",
                 replacement = "### Tanı")
          xfun::gsub_files(files = qmd_pdf_TR_files,
                 pattern = '\\!\\[\\]\\(\\.\\/qrcodes\\/\\{\\{template\\}\\}-\\{\\{stain\\}\\}_qrcode.svg\\)\\{width="15%"\\}',
                 replacement = "")

      - name: "Render Book pdf TR"
        shell: Rscript {0}
        run: |
          quarto::quarto_render(".", as_job = FALSE)

      - name: "Post Render Book pdf TR"
        shell: Rscript {0}
        run: |
          if (dir.exists(paths = "./_freeze")) {
            fs::dir_copy(path = "./_freeze",
                         new_path = "./_freeze_TR_pdf",
               overwrite = TRUE) }
          if (dir.exists(paths = "./_freeze")) { fs::dir_delete(path = "./_freeze") }
          patolojiatlasi_histopathologyatlas <- readxl::read_excel("./patolojiatlasi_histopathologyatlas.xlsx")
          patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas[, c("TR_chapter_qmd", "TR_pdf_chapter_qmd")]
          '%>%' <- magrittr:::`%>%`
          patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas %>%
            dplyr::distinct() %>%
            dplyr::filter(TR_chapter_qmd != TR_pdf_chapter_qmd)
            patolojiatlasi_histopathologyatlas$TR_pdf_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$TR_pdf_chapter_qmd, ".qmd")
            fs::file_delete(path = patolojiatlasi_histopathologyatlas$TR_pdf_chapter_qmd)


      - name: "Prepare Render Epub Word EN"
        shell: Rscript {0}
        run: |
          fs::file_copy(path = "./_quarto_EN_epub_word.yml",
              new_path = "./_quarto.yml",
              overwrite = TRUE)
          fs::file_copy(path = "./R/languageEN.R",
              new_path = "./R/language.R",
              overwrite = TRUE)
          if (dir.exists(paths = "./_freeze")) {fs::dir_delete(path = "./_freeze") }
          if (dir.exists(paths = "./_freeze_EN_epub_word")) {
          fs::dir_copy(path = "./_freeze_EN_epub_word",
               new_path = "./_freeze",
               overwrite = TRUE) }
          patolojiatlasi_histopathologyatlas <- readxl::read_excel("./patolojiatlasi_histopathologyatlas.xlsx")
          patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas[, c("TR_chapter_qmd", "EN_epub_word_chapter_qmd")]
          patolojiatlasi_histopathologyatlas$TR_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$TR_chapter_qmd, ".qmd")
          patolojiatlasi_histopathologyatlas$EN_epub_word_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$EN_epub_word_chapter_qmd, ".qmd")
          fs::file_copy(path = patolojiatlasi_histopathologyatlas$TR_chapter_qmd,
              new_path = patolojiatlasi_histopathologyatlas$EN_epub_word_chapter_qmd,
              overwrite = TRUE)
          qmd_epub_word_EN_files <- list.files(path = ".", pattern = "./*_epub_word_EN.qmd", recursive = FALSE)
          xfun::gsub_files(files = qmd_epub_word_EN_files,
                 pattern = "panel-tabset",
                 replacement = "")
          xfun::gsub_files(files = qmd_epub_word_EN_files,
                 pattern = ":::::",
                 replacement = "")
          xfun::gsub_files(files = qmd_epub_word_EN_files,
                 pattern = "### WSI - Link",
                 replacement = "")
          xfun::gsub_files(files = qmd_epub_word_EN_files,
                 pattern = "### WSI",
                 replacement = "")
          xfun::gsub_files(files = qmd_epub_word_EN_files,
                 pattern = "### Diagnosis",
                 replacement = "")
          xfun::gsub_files(files = qmd_epub_word_EN_files,
                 pattern = "### Click for Diagnosis",
                 replacement = "### Diagnosis")

      - name: "Render Book Epub Word EN"
        shell: Rscript {0}
        run: |
          quarto::quarto_render(".", as_job = FALSE)

      - name: "Post Render Book Epub Word EN"
        shell: Rscript {0}
        run: |
          if (dir.exists(paths = "./_freeze")) { fs::dir_copy(path = "./_freeze",
               new_path = "./_freeze_EN_epub_word",
               overwrite = TRUE) }
          if (dir.exists(paths = "./_freeze")) { fs::dir_delete(path = "./_freeze") }
          patolojiatlasi_histopathologyatlas <- readxl::read_excel("./patolojiatlasi_histopathologyatlas.xlsx")
          patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas[, c("TR_chapter_qmd", "EN_epub_word_chapter_qmd")]
          '%>%' <- magrittr:::`%>%`
          patolojiatlasi_histopathologyatlas <- patolojiatlasi_histopathologyatlas %>%
            dplyr::distinct() %>%
            dplyr::filter(TR_chapter_qmd != EN_epub_word_chapter_qmd)
          patolojiatlasi_histopathologyatlas$EN_epub_word_chapter_qmd <- paste0(patolojiatlasi_histopathologyatlas$EN_epub_word_chapter_qmd, ".qmd")
          fs::file_delete(path = patolojiatlasi_histopathologyatlas$EN_epub_word_chapter_qmd)


      - name: "Prepare Render pdf EN"
        shell: Rscript {0}
        run: |


      - name: "Render Book pdf EN"
        shell: Rscript {0}
        run: |
          quarto::quarto_render(".", as_job = FALSE)


      - name: "Post Render Book pdf EN"
        shell: Rscript {0}
        run: |






      - name: Get current date
        id: current_date
        run: echo "DATE=$(date +'%Y-%m')" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ env.DATE }}
          release_name: Release for ${{ env.DATE }}
          draft: false
          prerelease: false
          body: |
            Epub and Word Generated for the month of ${{ env.DATE }}
          files: |
            ./_epub_word_TR/Patoloji-Atlasi.epub
            ./_epub_word_TR/Patoloji-Atlasi.docx
            ./_pdf_TR/Patoloji-Atlasi.pdf
            ./_epub_word_EN/HistoPatology-Atlas.epub
            ./_epub_word_EN/HistoPatology-Atlas.docx

#
# ./_pdf_EN/HistoPatology-Atlas.pdf

