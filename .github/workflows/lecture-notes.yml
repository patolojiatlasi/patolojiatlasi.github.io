name: Lecture Notes Quarto Render Bilingual Book Push Other Repos and GitLab

on:
  workflow_dispatch:
  push:


jobs:


  lecture-notes:
    if: "contains(github.event.head_commit.message, 'lecture') && !contains(github.event.head_commit.message, 'merge') && !contains(github.event.head_commit.message, 'WIP')"
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      RENV_PATHS_ROOT: ~/.local/share/renv
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: "actions checkout"
        uses: actions/checkout@v3

      - name: "Setup Quarto"
        uses: quarto-dev/quarto-actions/setup@v2

      - name: "Install curl for Bioconductor"
        run: |
          sudo apt -y install libcurl4-openssl-dev

      - uses: r-lib/actions/setup-r@v2

      - uses: r-lib/actions/setup-renv@v2

      - name: Restore R package cache
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-


      - name: Install R dependencies
        run: |
            if (!requireNamespace("remotes", quietly = TRUE)) {install.packages("remotes", dependencies = TRUE, quiet = TRUE, verbose = FALSE)}
            remotes::install_deps(dependencies = TRUE)
            if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            renv::restore()
            if (!requireNamespace("fs", quietly = TRUE)) install.packages("fs", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            if (!requireNamespace("quarto", quietly = TRUE)) install.packages("quarto", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
            writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}


      - name: "Render patoloji-ders-notlari"
        shell: Rscript {0}
        run: |
          filestorender <- list.files(path = "./lecture-notes/", pattern = ".qmd", full.names = TRUE, recursive = TRUE)
          purrr::map(.x = filestorender, .f= quarto::quarto_render, output_format = 'all')
          # quarto::quarto_render(input = "./lecture-notes/*.qmd")


      - name: Commit results to main branch
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "CI added changes `date +'%Y-%m-%d %H:%M:%S'`" || echo "No changes to commit"
          git push origin || echo "No changes to commit"

      - name: Push changes # push the output folder to your repo
        uses: ad-m/github-push-action@master
        with:
          branch: main
          github_token: ${{ secrets.API_TOKEN_GITHUB }}
          # WORKFLOW_GITHUB_TOKEN
          force: true

      - name: Pushes to patoloji-ders-notlari
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'lecture-notes'
          destination-github-username: 'sbalci'
          destination-repository-name: 'patoloji-ders-notlari'
          user-email: drserdarbalci@gmail.com
          target-branch: main


  quarto-render-and-deploy:
    needs: lecture-notes
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      RENV_PATHS_ROOT: ~/.local/share/renv
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: "actions checkout"
        uses: actions/checkout@v3

      - name: "Setup Quarto"
        uses: quarto-dev/quarto-actions/setup@v2

      - name: "Install curl for Bioconductor"
        run: |
          sudo apt -y install libcurl4-openssl-dev

      - uses: r-lib/actions/setup-r@v2

      - uses: r-lib/actions/setup-renv@v2

      - name: Restore R package cache
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-



      - name: Install R dependencies
        run: |
            if (!requireNamespace("remotes", quietly = TRUE)) {install.packages("remotes", dependencies = TRUE, quiet = TRUE, verbose = FALSE)}
            remotes::install_deps(dependencies = TRUE)
            if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            renv::restore()
            if (!requireNamespace("fs", quietly = TRUE)) install.packages("fs", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            if (!requireNamespace("quarto", quietly = TRUE)) install.packages("quarto", dependencies = TRUE, quiet = TRUE, verbose = FALSE)
            saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
            writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}


      - name: "Render Book From EN"
        shell: Rscript {0}
        run: |
          if (dir.exists(paths = "./_freeze")) {fs::dir_delete(path = "./_freeze")}
          fs::dir_copy(path = "./_freeze_EN", new_path = "./_freeze", overwrite = TRUE)
          # Prepare EN
          fs::file_copy(path = "./_quarto_EN.yml", new_path = "./_quarto.yml", overwrite = TRUE)
          fs::file_copy(path = "./R/languageEN.R", new_path = "./R/language.R",overwrite = TRUE)
          # render EN
          quarto::quarto_render(".", as_job = FALSE)
          fs::dir_copy(path = "./_freeze", new_path = "./_freeze_EN", overwrite = TRUE)



      - name: "Render Book From TR"
        shell: Rscript {0}
        run: |
          if (file.exists("./EN/CNAME")){fs::file_delete(path = "./EN/CNAME")}
          # prepare TR
          if (dir.exists(paths = "./_freeze")) { fs::dir_delete(path = "./_freeze") }
          fs::dir_copy(path = "./_freeze_TR", new_path = "./_freeze", overwrite = TRUE)
          fs::file_copy(path = "./_quarto_TR.yml", new_path = "./_quarto.yml", overwrite = TRUE)
          fs::file_copy(path = "./R/languageTR.R", new_path = "./R/language.R", overwrite = TRUE)
          # render TR
          quarto::quarto_render(".", as_job = FALSE)
          fs::dir_copy(path = "./_freeze", new_path = "./_freeze_TR", overwrite = TRUE)
          # if (dir.exists(paths = "./_freeze")) { fs::dir_delete(path = "./_freeze") }
          # fs::dir_copy(path = "./EN", new_path = "./docs/EN", overwrite = TRUE)
          fs::dir_copy(path = "./docs", new_path = "./public", overwrite = TRUE)


      - name: Commit results to main branch
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "CI added changes `date +'%Y-%m-%d %H:%M:%S'`" || echo "No changes to commit"
          git push origin || echo "No changes to commit"
      - name: Push changes # push the output folder to your repo
        uses: ad-m/github-push-action@master
        with:
          branch: main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # WORKFLOW_GITHUB_TOKEN
          force: true

      - name: Pushes to patolojiatlasi EN
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'EN'
          destination-github-username: 'patolojiatlasi'
          destination-repository-name: 'EN'
          user-email: drserdarbalci@gmail.com
          target-branch: main




      - name: Pushes to atlas
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
           source-directory: 'public'
           destination-github-username: 'sbalci'
           destination-repository-name: 'atlas'
           user-email: drserdarbalci@gmail.com
           target-branch: main



  build-to-gitlab:
    needs: quarto-render-and-deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Mirror + trigger CI
      uses: SvanBoxel/gitlab-mirror-and-ci-action@master
      with:
        args: "https://gitlab.com/patolojiatlasi/tr"
      env:
        GITLAB_HOSTNAME: "gitlab.com"
        GITLAB_USERNAME: "patolojiatlasi"
        GITLAB_PASSWORD: ${{ secrets.GITLAB_PASSWORD }} # // Generate here: https://gitlab.com/profile/personal_access_tokens
        GITLAB_PROJECT_ID: "36540563" # // https://gitlab.com/<namespace>/<repository>/edit
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # // https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
